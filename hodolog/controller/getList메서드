  public List<PostResponse> getList(int page){
        Pageable pageable = PageRequest.of(page,5);
        return postRepository.findAll(pageable).stream()
                .map(post->PostResponse.builder()
                        .id(post.getId())
                        .title(post.getTitle())
                        .build())
                .collect(Collectors.toList());
    }

※ builder, stream을 사용해서 조회함.

stream.map이란??

stream.map()은 스트림 내의 각 요소에 대해 지정된 함수를 적용하여 새로운 요소로 변환하는 작업을 수행합니다.
위의 코드에서 .map(post->PostResponse.builder().id(post.getId()).title(post.getTitle()).build()) 부분은 postRepository.findAll(pageable)로부터 가져온 List<Post> 객체를 스트림으로 변환한 후, 각각의 Post 객체에 대해 실행되는 람다식입니다.
람다식인 post->PostResponse.builder().id(post.getId()).title(post.getTitle()).build()은 각각의 Post 객체를 입력으로 받아서, 해당 객체의 id와 title 필드 값을 사용하여 새로운 PostResponse 객체를 생성하는 역할을 합니다.
즉, .map() 메소드는 스트림 내의 모든 요소에 대해 지정된 함수를 실행하고, 그 결과로 반환된 요소들을 새로운 스트림으로 만듭니다. 이 경우에는 List<Post>가 List<PostResponse>로 변환되어 반환됩니다.
결과적으로 위 코드는 게시물 목록을 가져와서 각각의 게시물을 PostResponse 형태로 변환한 후 리스트 형태로 반환하는 기능을 수행합니다.
